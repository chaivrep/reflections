When would you want to use a remote repository rather than keeping all your work local?

A remote repository would be helpful when you need to share files among multiple devices,
like when you're collaborating with others or use multiple computers.  It's also a good
way to back up your code, in case you have a hardware malfunction or accidentally delete
your local repository.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

There are a couple of reasons you would want to pull changes from your remote manually:
 - Changes made to the remote could break your local work, so you'll want to choose when
 to make the pull; and
 - You may decide you no longer want to sync with a particular branch on the remote,
 so you'll want to specify a particular branch for the pull.

Describe the differences between forks, clones, and branches. When would you use one
instead of another?

A fork is a special way of making a clone of a repository within GitHub.  You would make
a fork of someone's repo if you wanted to edit it in some way.  A clone is used to make
a local copy of either a remote or local repository.  Cloning allows you to make changes
to files on your local machine.  A branch is used within a repository; it allows you to make
new changes and commits to files without affecting copies of those files on other branches.
Branches are helpful, for example, when you want to create a new feature, but you want to
preserve a copy of the original code and continue to work on it indenpendently of the branch
containing the new feature.

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a local copy of the last known state of the remote allows you to compare the current
state of the remote with the state of the remote in your repository. You can then tell
if any changes have occurred in the remote since you last synced.  This allows git to merge
the remote into your local repository and merge (or identify conflicts) as necessary.

How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?

You could collaborate by emailing each other copies of your files.  This would be easier in
that there would be no learning curve for Git or Github, but it would be harder in that you'd
have to always manually merge your files and send out the latest version any time the file
changed.  You could also share files via Google docs and edit them jointly online, but you would
likley often end up with files that don't compile, because someone would be in the middle of
working on something when the compilation was attempted.